/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package br.com.tracun.userInterfaces;

import br.com.tracun.app.DBController;
import java.io.File;
import java.io.FileInputStream;
import java.io.IOException;
import java.io.ObjectInputStream;
import java.net.Socket;
import java.util.Scanner;
import javax.swing.JOptionPane;
import br.com.tracun.objectClasses.Contact;
import br.com.tracun.objectClasses.Note;
import br.com.tracun.objectClasses.Request;
import br.com.tracun.objectClasses.Response;
import br.com.tracun.objectClasses.User;

/**
 *
 * @author bastolu
 */
public class MenuInterface extends javax.swing.JFrame {

    /**
     * Creates new form NoteInterface
     */
    static Socket socket;
    static Scanner scanner;
    static String operation;
    static String key;
    static Response resp;
    static Request request;
    static UserInterface userInterface = new UserInterface();
    static MenuInterface noteInterface = new MenuInterface();
    static ContactInterface contactInterface = new ContactInterface();
    
    static final String NOTE_PATH = "Notes\\";
    static final String USER_PATH = "Users\\";
    static final String CONTACT_PATH = "Contacts\\";

    public MenuInterface() {

        initComponents();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        btnOK = new javax.swing.JButton();
        txtKey = new javax.swing.JTextField();
        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        txtNote = new javax.swing.JTextArea();
        btnCancel = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DO_NOTHING_ON_CLOSE);
        setTitle("Nota");
        setAlwaysOnTop(true);
        setLocationByPlatform(true);
        setMinimumSize(new java.awt.Dimension(520, 363));
        setResizable(false);
        setSize(new java.awt.Dimension(520, 363));

        btnOK.setText("OK");
        btnOK.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnOKActionPerformed(evt);
            }
        });

        jLabel1.setText("Key:");

        txtNote.setColumns(20);
        txtNote.setLineWrap(true);
        txtNote.setRows(5);
        jScrollPane1.setViewportView(txtNote);

        btnCancel.setText("Cancelar");
        btnCancel.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnCancelActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 500, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(0, 0, Short.MAX_VALUE)))
                .addContainerGap())
            .addGroup(layout.createSequentialGroup()
                .addGap(184, 184, 184)
                .addComponent(btnOK, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(btnCancel)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(8, 8, 8)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtKey, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 295, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnOK)
                    .addComponent(btnCancel))
                .addGap(5, 5, 5))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void btnOKActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnOKActionPerformed
        // TODO add your handling code here:
        
        if (txtKey.getText().equals("")) {
            JOptionPane.showMessageDialog(this, "Preencher o campo Key");
        } else {
            sendNoteRequest(new Request(operation, new Note(txtKey.getText(), txtNote.getText()), this.txtKey.getText()));
            this.setVisible(false);
            try {
                this.finalize();
                txtNote.setText("");
            } catch (Throwable e) {
                System.out.println("Menu client Says: Erro ao encerrar NewClient - " + e.getMessage());
            }
        }
    }//GEN-LAST:event_btnOKActionPerformed

    private void btnCancelActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnCancelActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        try {
            this.finalize();
            txtNote.setText("");
        } catch (Throwable e) {
            System.out.println("Menu client Says: Erro ao encerrar NewClient - " + e.getMessage());
        }
    }//GEN-LAST:event_btnCancelActionPerformed

    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MenuInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MenuInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MenuInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MenuInterface.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        //</editor-fold>
        while (true) {
            scanner = new Scanner(System.in);
            System.out.println("Qual dado deseja salvar?"
                    + "\n1 - Note"
                    + "\n2 - User"
                    + "\n3 - Contact");

            int opc = scanner.nextInt();
            switch (opc) {
                case 1:
                    operation = chooseOperation();
                    if (operation.equals("create")) {
                        noteInterface.txtKey.setText("");
                        enableNoteInterface();
                        noteInterface.setVisible(true);
                    } else if (operation.equals("update")) {
                        enableNoteInterface();
                        key = JOptionPane.showInputDialog("Qual a Key? ");
                        Note note = (Note) consultNote(new Request("consult", new Note(key), key));
                        if (note != null) {
                            noteInterface.txtNote.setText(note.getData());
                            noteInterface.txtKey.setText(note.getKey());
                            noteInterface.txtKey.setEnabled(false);
                            noteInterface.setVisible(true);
                        }
                    } else if (operation.equals("consultAll")) {
                        sendNoteRequest(new Request(operation, NOTE_PATH, new Note("")));
                    } else if (!operation.equals("")) { //Consult
                        key = JOptionPane.showInputDialog("Qual a Key? ");
                        sendNoteRequest(new Request(operation, null, new Note(key)));
                    }
                    break;
                case 2:
                    operation = chooseOperation();
                    if (operation.equals("create")) {
                        userInterface = new UserInterface();
                        userInterface.setVisible(true);
                    } else if (operation.equals("update")) {

                        key = JOptionPane.showInputDialog("Qual a Key? ");

                        User user = (User) consultUser(new Request("consult", null, new User(key)));
                        if (user != null) {
                            userInterface.txtUsu.setText(user.getUser());
                            userInterface.txtSenha.setText(user.getPassword());
                            userInterface.setUser(new User(key));
                            userInterface.setVisible(true);
                        }

                    } else if (operation.equals("consultAll")) {
                        sendUserRequest(new Request(operation, USER_PATH, new User("")));
                    } else if (!operation.equals("")) { //Consult
                        key = JOptionPane.showInputDialog("Qual a Key? ");
                        sendUserRequest(new Request(operation, null, new User(key)));
                    }
                    break;
                case 3:
                    operation = chooseOperation();
                    if (operation.equals("create")) {
                        contactInterface = new ContactInterface();
                        contactInterface.setVisible(true);
                    } else if (operation.equals("update")) {

                        key = JOptionPane.showInputDialog("Qual a Key? ");

                        Contact contact = (Contact) consultContact(new Request("consult", null, new Contact(key)));
                        if (contact != null) {
                            contactInterface.txtKey.setText(contact.getKey());
                            contactInterface.txtName.setText(contact.getName());
                            contactInterface.txtPhone.setText(String.valueOf(contact.getPhone()));
                            contactInterface.txtMail.setText(contact.getMail());
                            contactInterface.setContact(new Contact(key));
                            contactInterface.setVisible(true);
                        }
                    } else if (operation.equals("consultAll")) {
                        sendContactRequest(new Request(operation, CONTACT_PATH, new Contact("")));
                    } else if (!operation.equals("")) { //Consult
                        key = JOptionPane.showInputDialog("Qual a Key? ");
                        sendContactRequest(new Request(operation, null, new Contact(key)));
                    }
                    break;
                default:
                    System.out.println("Menu client Says: Opção não cadastrada !");
                    break;
            }
        }
    }

    static String chooseOperation() {
        scanner = new Scanner(System.in);
        System.out.println("O que deseja fazer?"
                + "\n1 - Create"
                + "\n2 - Update"
                + "\n3 - Delete"
                + "\n4 - Consult"
                + "\n5 - Consult All");

        int typeOperation = scanner.nextInt();

        switch (typeOperation) {
            case 1:
                return "create";
            case 2:
                return "update";
            case 3:
                return "delete";
            case 4:
                return "consult";
            case 5:
                return "consultAll";
            default:
                return "";
        }
    }

    static Object consultNote(Request req) {

        try {
            socket = new Socket("localhost", 9400);

            DBController.send(socket, req);
            resp = (Response) DBController.receive(socket);

            if (resp.getObj() != null) {
                return resp.getObj();

            } else {
                System.out.println("Menu client Says: Status: " + resp.getStatus());
            }

        } catch (IOException e) {
            System.out.println("Menu client Says: Erro - consultNote - " + e.getMessage());
        }
        return null;
    }

    static Object consultUser(Request req) {

        try {
            socket = new Socket("localhost", 9400);

            DBController.send(socket, req);
            resp = (Response) DBController.receive(socket);

            if (resp.getObj() != null) {
                return resp.getObj();

            } else {
                System.out.println("Menu client Says: Status - " + resp.getStatus());
            }

        } catch (IOException e) {
            System.out.println("Menu client Says: Erro - consultUser - " + e.getMessage());
        }
        return null;
    }
    
    static Object consultContact(Request req) {

        try {
            socket = new Socket("localhost", 9400);
            
            DBController.send(socket, req);
            resp = (Response) DBController.receive(socket);

            if (resp.getObj() != null) {
                return resp.getObj();

            } else {
                System.out.println("Menu client Says: Status - " + resp.getStatus());
            }

        } catch (IOException e) {
            System.out.println("Menu client Says: Erro - consultContact - " + e.getMessage());
        }
        return null;
    }

    static void sendNoteRequest(Object request) {

        try {
            socket = new Socket("localhost", 9400);

            DBController.send(socket, request);
            resp = (Response) DBController.receive(socket);

            if (resp.getObj() != null) {

                if (resp.getObj().getClass().isArray()) {
                    printNote(resp.getObj());
                } else {
                    disableNoteInterface();
                    System.out.println(resp.getStatus());
                    Note noteResponse = (Note) resp.getObj();
                    System.out.println(noteResponse.print());
                    noteInterface.txtNote.setText(noteResponse.getData());
                    noteInterface.setVisible(true);
                }
            } else {
                System.out.println("Menu client Says: Status - " + resp.getStatus());
            }

        } catch (IOException e) {
            System.out.println("Menu client Says: Erro - sendNoteRequest - " + e.getMessage());
        }
    }

    static void sendUserRequest(Object request) {
        try {
            socket = new Socket("localhost", 9400);
            //System.out.println("sendUserRequest obj: " + request.getClass().toString());

            DBController.send(socket, request);
            resp = (Response) DBController.receive(socket);

            if (resp != null && resp.getObj() != null) {

                if (resp.getObj().getClass().isArray()) {
                    printUser(resp.getObj());
                } else {
                    System.out.println(resp.getStatus());
                    System.out.println(resp.getObj().getClass().toString());
                    User dataResponse = (User) resp.getObj();
                    System.out.println(dataResponse.print());
                }
            } else {
                System.out.println("Menu client Says: Status - " + resp.getStatus());
            }

        } catch (IOException e) {
            System.out.println("Menu client Says: Erro - sendUserRequest - " + e.getMessage());
        }
    }

    static void sendContactRequest(Object request) {
        try {
            socket = new Socket("localhost", 9400);

            DBController.send(socket, request);
            resp = (Response) DBController.receive(socket);

            if (resp.getObj() != null) {

                if (resp.getObj().getClass().isArray()) {
                    printContact(resp.getObj());
                } else {
                    System.out.println(resp.getStatus());
                    Contact dataResponse = (Contact) resp.getObj();
                    System.out.println(dataResponse.print());
                }
            } else {
                System.out.println("Menu client Says: Status - " + resp.getStatus());
            }

        } catch (IOException e) {
            System.out.println("Menu client Says: Erro - sendContactRequest - " + e.getMessage());
        }
    }
    
    static void printUser(Object obj) {
        File[] listFiles;
        listFiles = (File[]) obj;

        try {
            for (File listFile : listFiles) {
                FileInputStream is = new FileInputStream(listFile);
                ObjectInputStream ois = new ObjectInputStream(is);
                User user = (User) ois.readObject();
                System.out.println(user.print());
            }

        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Menu client Says: Erro ao imprimir Users - " + e.getMessage());
        }
    }

    static void printNote(Object obj) {
        File[] listFiles;
        listFiles = (File[]) obj;
        //Desabilita o NoteInterface para impedir alterações
        disableNoteInterface();

        try {
            for (File listFile : listFiles) {
                FileInputStream is = new FileInputStream(listFile);
                ObjectInputStream ois = new ObjectInputStream(is);
                Note note = (Note) ois.readObject();
                noteInterface.txtNote.setText(noteInterface.txtNote.getText() + note.print());
            }
            noteInterface.setVisible(true);
        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Menu client Says: Erro ao imprimir Note - " + e.getMessage());
        }
    }
    
    static void printContact(Object obj) {
        File[] listFiles;
        listFiles = (File[]) obj;

        try {
            for (File listFile : listFiles) {
                FileInputStream is = new FileInputStream(listFile);
                ObjectInputStream ois = new ObjectInputStream(is);
                Contact contact = (Contact) ois.readObject();
                System.out.println(contact.print());
            }

        } catch (IOException | ClassNotFoundException e) {
            System.out.println("Menu client Says: Erro ao imprimir Users - " + e.getMessage());
        }
    }
    
    static void disableUserInterface() {
        userInterface.txtUsu.setEnabled(false);
        userInterface.txtSenha.setEnabled(false);
        userInterface.btnOK.setEnabled(false);
    }

    static void enableUserInterface() {
        userInterface.txtUsu.setEnabled(true);
        userInterface.txtSenha.setEnabled(true);
        userInterface.btnOK.setEnabled(true);
    }

    static void disableNoteInterface() {
        noteInterface.txtNote.setEnabled(false);
        noteInterface.txtKey.setEnabled(false);
        noteInterface.btnOK.setEnabled(false);
    }

    static void enableNoteInterface() {
        noteInterface.txtNote.setEnabled(true);
        noteInterface.txtKey.setEnabled(true);
        noteInterface.btnOK.setEnabled(true);
    }
    
    static void disableContactInterface() {
        contactInterface.txtKey.setEnabled(false);
        contactInterface.txtName.setEnabled(false);
        contactInterface.txtPhone.setEnabled(false);
        contactInterface.txtMail.setEnabled(false);
        contactInterface.btnOK.setEnabled(false);
    }

    static void enableContactInterface() {
        contactInterface.txtKey.setEnabled(true);
        contactInterface.txtName.setEnabled(true);
        contactInterface.txtPhone.setEnabled(true);
        contactInterface.txtMail.setEnabled(true);
        contactInterface.btnOK.setEnabled(true);
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnCancel;
    private javax.swing.JButton btnOK;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField txtKey;
    private javax.swing.JTextArea txtNote;
    // End of variables declaration//GEN-END:variables
}
